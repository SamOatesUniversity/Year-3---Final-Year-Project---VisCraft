// Textures //
Texture2D lowTexture	: register(t0);
Texture2D midTexture	: register(t1);
Texture2D highTexture	: register(t2);
Texture2D depthTexture	: register(t3);

// Sample States //
SamplerState SampleType;

// Light globals //
cbuffer LightBuffer
{
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float colourRender;
};

// TYPEDEFS //
struct PixelInputType
{
    float4 position : SV_POSITION;
	float2 texcoord : TEXCOORD0;
    float3 normal : NORMAL;
	float4 worldPosition : TEXCOORD1;
	matrix lightViewProjection : TEXCOORD2;
};

float4 Shadow(PixelInputType input)
{
	float4 hpos_from_light = mul(input.worldPosition, input.lightViewProjection);
    float light_to_point_depth = hpos_from_light.z / hpos_from_light.w;

	float xCoord = ((hpos_from_light.x / hpos_from_light.w) + 1.0f) * 0.5f;
	float yCoord = ((-hpos_from_light.y / hpos_from_light.w) + 1.0f) * 0.5f;

    float2 shadow_texcoord = float2(xCoord, yCoord);

	const float bias = 0.0004f;
    float light_to_first_hit_depth = depthTexture.Sample(SampleType, shadow_texcoord).x;			
	float shadowing = (light_to_first_hit_depth + bias) < light_to_point_depth ? 0.5f : 1.0f;
	
	return float4(shadowing, shadowing, shadowing, 1.0f);
}

float4 TerrainPixelShader(PixelInputType input) : SV_TARGET
{
	float4 lowColor = lowTexture.Sample(SampleType, input.texcoord);
	float4 midColor = midTexture.Sample(SampleType, input.texcoord);
	float4 highColor = highTexture.Sample(SampleType, input.texcoord);
	
	if (colourRender != 0.0f)
	{
		lowColor = float4(0.54f, 0.99f, 0.76f, 1.0f);
		midColor = float4(0.125f, 0.435f, 0.29f, 1.0f);
		highColor = float4(0.29f, 0.31f, 0.80f, 1.0f);
	}

	float slope = 1.0f - input.normal.y;

	float4 textureColor = float4(1.0f, 1.0f, 1.0f, 1.0f);
	if (slope < 0.2)
	{
		float blendAmount = slope * 5.0f;
		textureColor = lerp(lowColor, midColor, blendAmount);
	}
	else if ((slope < 0.7) && (slope >= 0.2f))
	{
		float blendAmount = (slope - 0.2f) * 2.0f;
		textureColor = lerp(midColor, highColor, blendAmount);
	}
	else 
	{
		textureColor = highColor;
	}

    // Set the default output color to the ambient light value for all pixels.
    float4 color = ambientColor;

    // Invert the light direction for calculations.
    float3 lightDir = -normalize(lightDirection);

    // Calculate the amount of light on this pixel.
    float lightIntensity = saturate(dot(input.normal, lightDir));

    if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);
    }

    // Saturate the final light color.
    color = saturate(color);

	color = color * textureColor;

    return color * Shadow(input);
}